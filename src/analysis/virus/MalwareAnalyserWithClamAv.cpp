#include "MalwareAnalyserWithClamAv.hpp"

MalwareAnalyserWithClamAv::MalwareAnalyserWithClamAv(Device* pDevice) {
    device = pDevice;

    isClamAvInitialized = false;
    isDbInitialized = false;
    isEngineCreated = false;
    isEngineCompiled = false;
    sigs = 0;
}

int MalwareAnalyserWithClamAv::analyseForMalware(std::string *partitions, std::string *filesystems) {
    int result;
    unsigned long int size = 0;
    fileCounter = 0;
    infectedFilesCounter = 0;
    infectedFiles.clear();
    virusNames.clear();

    result = initialisation();
    if (result == 0) {
        if (device->handleUsbMounting(true, partitions[0], filesystems[0])) {
            fileHandler.fileDiscovery(settings.mountPoint, true,
                    [this, &result, &size](const std::string& filePath) {
                int tempResult = scanFile(filePath, size);

                if (tempResult == 0) {
                    tempResult = scanDescriptor(filePath, size);
                }

                if (tempResult != 0) {
                    result = tempResult;
                    infectedFiles.insert(filePath);
                    infectedFilesCounter++;
                }

                fileCounter++;
            });

            device->handleUsbMounting(false, "", "");
            mb = size * (CL_COUNT_PRECISION / 1024) /1024.0;
        } else {
            deleteEngine();
            return 8;
        }
    } else {
        deleteEngine();
    }

    return result;
}

void MalwareAnalyserWithClamAv::deleteEngine() {
    if (isEngineCompiled) {
        cl_engine_free(engine);
        cl_statfree(&dbstat);
    }
}

long double MalwareAnalyserWithClamAv::getDataScannedInMb() {
    return mb;
}

std::map<std::string, bool> MalwareAnalyserWithClamAv::getEngineStatus() {
    engineStatus.insert(std::make_pair("isClamAvInitialized", isClamAvInitialized));
    engineStatus.insert(std::make_pair("isEngineCreated", isEngineCreated));
    engineStatus.insert(std::make_pair("isDbInitialized", isDbInitialized));
    engineStatus.insert(std::make_pair("isEngineCompiled", isEngineCompiled));

    return engineStatus;
}

int MalwareAnalyserWithClamAv::getFileCounter() {
    return fileCounter;
}

std::set<std::string> MalwareAnalyserWithClamAv::getFoundVirusNames(){
    return virusNames;
}

std::set<std::string> MalwareAnalyserWithClamAv::getInfectedFiles() {
    return infectedFiles;
}

int MalwareAnalyserWithClamAv::getInfectedFilesCounter() {
    return infectedFilesCounter;
}

unsigned int MalwareAnalyserWithClamAv::getNumberOfSignature() {
    return sigs;
}

int MalwareAnalyserWithClamAv::initialisation() {

    if (!isClamAvInitialized) {
        if (initializeClamAvLib()) {
            isClamAvInitialized = true;
        } else {
            return 1;
        }
    }
    
    if (!isEngineCreated) {
        if (createEngine()) {
            isEngineCreated = true;
        } else {
            return 2;
        }
    }

    // check DB
    if (int result = loadDatabase() != 0) {
        return result;
    }

    // check engine compilation
    if (!isEngineCompiled) {
        if (compileEngine()) {
            isEngineCompiled = true;
        } else {
            return 5;
        }
    }

    return 0;
}

bool MalwareAnalyserWithClamAv::createEngine() {
    return (engine = cl_engine_new()) != nullptr;
}

bool MalwareAnalyserWithClamAv::compileEngine() {
    if (cl_engine_compile(engine) != CL_SUCCESS) {
        cl_engine_free(engine);
        return false;
    }

    return true;
}

bool MalwareAnalyserWithClamAv::initializeClamAvLib() const {
    return !(cl_init(CL_INIT_DEFAULT) != CL_SUCCESS);
}

int MalwareAnalyserWithClamAv::getScanResult(int result) {
    switch (result) {
        case (CL_CLEAN):
            return 0;
        case (CL_VIRUS):
            return 6;
        default:
            cl_engine_free(engine);
            return 7;
    }
}

int MalwareAnalyserWithClamAv::loadDatabase() {
    if (!isDbInitialized) {
        memset(&dbstat, 0, sizeof(struct cl_stat));
        cl_statinidir(cl_retdbdir(), &dbstat);

        if (cl_load(cl_retdbdir(), engine, &sigs, CL_DB_STDOPT) != CL_SUCCESS) {
            cl_engine_free(engine);
            return 3;
        }

        isDbInitialized = true;
    } else if (cl_statchkdir(&dbstat) == 1) {
        if (cl_load(cl_retdbdir(), engine, &sigs, CL_DB_STDOPT) != CL_SUCCESS) {
            cl_engine_free(engine);
            return 3;
        }

        isEngineCompiled = false;
        cl_statfree(&dbstat);
        cl_statinidir(cl_retdbdir(), &dbstat);
    }

    return 0;
}

int MalwareAnalyserWithClamAv::scanFile(const std::string& filepath, unsigned long int& size) {
    int result;
    const char *virname;
    const char *filename;
    struct cl_scan_options options;

    filename = filepath.c_str();

    // set options for scan process
    memset(&options, 0, sizeof(struct cl_scan_options));
    // Scan in all-match mode
    options.general |= CL_SCAN_GENERAL_ALLMATCHES | CL_SCAN_GENERAL_HEURISTICS;
    // enable all parsers
    options.parse |= ~0;
    options.heuristic |= CL_SCAN_GENERAL_HEURISTIC_PRECEDENCE;

    result = cl_scanfile(filename, &virname, &size, engine, &options);

    if (virname != NULL && virname[0] != '\0') {
        virusNames.insert(virname);
    }

    return getScanResult(result);
}

int MalwareAnalyserWithClamAv::scanDescriptor(const std::string& filepath, unsigned long int& size) {
    int fileDescriptor, result;
    const char *virname;
    const char *filename;
    struct cl_scan_options options;

    filename = filepath.c_str();
    fileDescriptor = open(filename, O_RDONLY);

    if (fileDescriptor == -1) {
        return 8;
    }

    // set options for scan process
    memset(&options, 0, sizeof(struct cl_scan_options));
    // Scan in all-match mode
    options.general |= CL_SCAN_GENERAL_ALLMATCHES | CL_SCAN_GENERAL_HEURISTICS;
    // enable all parsers
    options.parse |= ~0;
    options.heuristic |= CL_SCAN_GENERAL_HEURISTIC_PRECEDENCE;

    result = cl_scandesc(fileDescriptor, filename, &virname, &size, engine, &options);

    if (virname != NULL && virname[0] != '\0') {
        virusNames.insert(virname);
    }

    close(fileDescriptor);

    return getScanResult(result);
}

MalwareAnalyserWithClamAv::~MalwareAnalyserWithClamAv() = default;
