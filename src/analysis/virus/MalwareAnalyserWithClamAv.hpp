#ifndef DUCKYDETECTOR_MALWAREANALYSERWITHCLAMAV_HPP // prevents multiple compiles
#define DUCKYDETECTOR_MALWAREANALYSERWITHCLAMAV_HPP

#include <clamav.h>
#include <cstring>
#include <fcntl.h>
#include <map>
#include <set>
#include "../../util/Device.hpp"
#include "../../util/FileHandler.hpp"

class MalwareAnalyserWithClamAv {
    public: 
        explicit MalwareAnalyserWithClamAv(Device* device);
        virtual ~MalwareAnalyserWithClamAv();

        /**
         * Analysing the device for malware
         *
         * @param partitions
         * @param filesystems
         * @return
         * 0 - OK, analysis went fine
         * 1 - Initialisation of ClamAV library went wrong!
         * 2 - Creating ClamAV engine went wrong!
         * 3 - Loading database went wrong!
         * 4 - Reloading database went wrong!
         * 5 - Compiling ClamAV engine went wrong!
         * 6 - Virus detected!
         * 7 - Unspecific scan result!
         * 8 - Could not access USB device or file!
         */
        int analyseForMalware(std::string *partitions, std::string *filesystems);
        void deleteEngine();
        long double getDataScannedInMb();
        std::map<std::string, bool> getEngineStatus();
        int getFileCounter();
        std::set<std::string> getFoundVirusNames();
        std::set<std::string> getInfectedFiles();
        int getInfectedFilesCounter();
        unsigned int getNumberOfSignature();

    private:
        bool isClamAvInitialized;
        bool isDbInitialized;
        bool isEngineCreated;
        bool isEngineCompiled;
        unsigned int sigs = 0;
        long double mb;
        int fileCounter = 0;
        int infectedFilesCounter = 0;
        std::set<std::string> infectedFiles;
        std::set<std::string> virusNames;
        std::map<std::string, bool> engineStatus;
        Device* device;
        FileHandler fileHandler;
        Settings settings;
        struct cl_engine *engine;
        struct cl_stat dbstat;

        /**
         * Initialise the ClamAV Framework
         *
         * @return
         * 0 - OK, initialisation went fine
         * 1 - Initialisation of ClamAV library went wrong!
         * 2 - Creating ClamAV engine went wrong!
         * 3 - Loading database went wrong!
         * 4 - Reloading database went wrong!
         * 5 - Compiling ClamAV engine went wrong!
         */
        int initialisation();
        bool createEngine();
        bool compileEngine();
        bool initializeClamAvLib() const;
        int getScanResult(int result);
        int loadDatabase();
        int scanFile(const std::string& filepath, unsigned long int& size);
        int scanDescriptor(const std::string& filepath, unsigned long int& size);
};

#endif // DUCKYDETECTOR_MALWAREANALYSERWITHCLAMAV_HPP